// generated from rosidl_adapter/resource/action.idl.em
// with input from as2_msgs/action/FollowPath.action
// generated code does not contain a copyright notice

#include "as2_msgs/msg/PoseWithID.idl"
#include "as2_msgs/msg/YawMode.idl"
#include "std_msgs/msg/Header.idl"

module as2_msgs {
  module action {
    @verbatim (language="comment", text=
      "Follow path action definition")
    struct FollowPath_Goal {
      @verbatim (language="comment", text=
        "Request" "\n"
        "Message header, with the frame of the pose list")
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        "Yaw goal mode")
      as2_msgs::msg::YawMode yaw;

      @verbatim (language="comment", text=
        "List of poses with ID in path")
      sequence<as2_msgs::msg::PoseWithID> path;

      @verbatim (language="comment", text=
        "Maximum speed desired in path (m/s)")
      float max_speed;
    };
    @verbatim (language="comment", text=
      "Result")
    struct FollowPath_Result {
      @verbatim (language="comment", text=
        "False if failed to follow_path")
      boolean follow_path_success;
    };
    @verbatim (language="comment", text=
      "Feedback")
    struct FollowPath_Feedback {
      @verbatim (language="comment", text=
        "Actual speed (m/s)")
      float actual_speed;

      @verbatim (language="comment", text=
        "Distance to next waypoint (m)")
      float actual_distance_to_next_waypoint;

      @verbatim (language="comment", text=
        "Remaining_waypoints")
      uint16 remaining_waypoints;

      @verbatim (language="comment", text=
        "Next waypoint id in path to follow")
      string next_waypoint_id;
    };
  };
};
